const jwt = require('jsonwebtoken');
const config = require('config');

module.exports = function(req, res, next) { 
    // Get token from header
    const token = req.header('x-auth-token');

    // Check if no token
    if(!token) { 
        return res.status(401).json({ msg: 'No token, authorization denied' });
    }

    // Verify token
    try {

        // If a token is present, it attempts to verify the token using jsw.verify(token, config.get('jwtSecret')). 
        // The jwtSecret value is retrieved from the configuration file using config.get().

        // When the token is successfully verified, jsw.verify returns the 
        // decoded payload which contains the information that was originally encoded into the JWT
        // const payload = {
        //     user: {
        //         id: user.id
        //     }
        // }
        // which is the user id in this case generated by mongoDB

        const decoded = jwt.verify(token, config.get('jwtSecret'));
        
        // We can then use this req.user in any of our protected routes
        // We set the user in the payload in users.js
        
        // decoded user information is extracted from the decoded token (decoded.user) and assigned to req.user. 
        // This allows other route handlers downstream to access the authenticated user's information.
        req.user = decoded.user;
        next();

    } catch(err) { 
        res.status(401).json({ msg: 'Token is not valid' });
    }
}